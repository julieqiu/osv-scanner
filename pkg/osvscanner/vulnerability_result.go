package osvscanner

import (
	"fmt"

	"github.com/google/osv-scanner/internal/osv"
	"github.com/google/osv-scanner/internal/output"
	"github.com/google/osv-scanner/pkg/config"
	"github.com/google/osv-scanner/pkg/models"
)

// Convert raw OSV API response into structured vulnerability information.
func groupResponse(r *output.Reporter, query osv.BatchedQuery, resp *osv.HydratedBatchedResponse, configManager *config.ConfigManager) models.VulnerabilityResults {
	output := models.VulnerabilityResults{
		Results: []models.PackageSource{},
	}
	groupedBySource := map[models.SourceInfo][]models.PackageVulns{}

	for i, query := range query.Queries {
		response := resp.Results[i]
		if len(response.Vulns) == 0 {
			continue
		}
		var pkg models.PackageVulns
		if query.Commit != "" {
			pkg.Package.Version = query.Commit
			pkg.Package.Ecosystem = "GIT"
		} else if query.Package.PURL != "" {
			var err error
			pkg.Package, err = PURLToPackage(query.Package.PURL)
			if err != nil {
				r.PrintError(fmt.Sprintf("Failed to parse purl: %s, with error: %s",
					query.Package.PURL, err))
				continue
			}
			pkg.Vulnerabilities = response.Vulns
		} else {
			pkg = models.PackageVulns{
				Package: models.PackageInfo{
					Name:      query.Package.Name,
					Version:   query.Version,
					Ecosystem: query.Package.Ecosystem,
				},
				Vulnerabilities: response.Vulns,
			}
		}

		groupedBySource[query.Source] = append(groupedBySource[query.Source], pkg)
	}

	for source, packages := range groupedBySource {
		output.Results = append(output.Results, models.PackageSource{
			Source:   source,
			Packages: packages,
		})
	}

	return output
}
